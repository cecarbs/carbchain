class TransactionPool:
    def __init__(self):
        self.transaction_map = {}
    
    def set_transaction(self, transaction):
        """
        Set a transaction in the transaction pool
        """
        self.transaction_map[transaction.id] = transaction

    def find_existing_transaction(self, address):
        """
        Returns an existing transaction generated by the address in the transaction pool
        """
        for transaction in self.transaction_map.values():
            if transaction.metadata['address'] == address:
                return transaction

    def transaction_data(self):
        """
        Returns transactions of transaction pool as JSON serialized form
        """
        
        transaction_data = [transaction.convert_to_json() for transaction in self.transaction_map.values()]

        return transaction_data
    
    def clear_blockchain_transaction(self, blockchain):
        """
        Remove duplicate transactions in blockchain
        Ensures miners don't create a block with transactions that have already been recorded
        """
        for block in blockchain.chain:
            for transaction in block.data:
                try:
                    del self.transaction_map[transaction['id']]
                except KeyError:
                    pass
