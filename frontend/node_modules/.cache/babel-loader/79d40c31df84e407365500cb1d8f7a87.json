{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/crypto/PlotData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlotData = ({\n  data\n}) => {\n  _s();\n\n  const [timespan, setTimespan] = useState(\"24\");\n  const [isActiveOne, setIsActiveOne] = useState({\n    isActiveOne: false,\n    isActiveTwo: false,\n    isActiveThree: false\n  });\n  const [isActiveTwo, setIsActiveTwo] = useState({\n    isActiveOne: false,\n    isActiveTwo: false,\n    isActiveThree: false\n  });\n  const [isActiveThree, setIsActiveThree] = useState({\n    isActiveOne: false,\n    isActiveTwo: false,\n    isActiveThree: false\n  });\n  const {\n    day,\n    month,\n    year,\n    detail\n  } = data;\n\n  const timeViewHandler = () => {\n    switch (timespan) {\n      case \"24h\":\n        return day;\n\n      case \"30d\":\n        return month;\n\n      case \"1y\":\n        return year;\n\n      default:\n        return day;\n    }\n  };\n\n  const transformData = data => {\n    let plotData = [];\n    let x = [];\n    let y = [];\n    data === null || data === void 0 ? void 0 : data.forEach(each => {\n      x.push(each.t);\n      y.push(each.y);\n    });\n    plotData['x'] = x;\n    plotData['y'] = y;\n    return plotData;\n  };\n\n  const dayBtn = () => {\n    setTimespan(\"24h\");\n  };\n\n  const monthBtn = () => {\n    setTimespan(\"30d\");\n  };\n\n  const yearBtn = () => {\n    setTimespan(\"1y\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [detail && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", detail.current_price.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PriceChange, {\n          price: detail.price_change_percentage_24h,\n          children: [detail.price_change_percentage_24h.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)\n    }, void 0, false), day && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          type: 'scatter',\n          mode: 'lines',\n          x: transformData(timeViewHandler())['x'],\n          y: transformData(timeViewHandler())['y'],\n          marker: {\n            color: '#ed022d'\n          }\n        }],\n        layout: {\n          autosize: true,\n          title: `${detail.name}`\n        },\n        useResizeHandler: true,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: dayBtn,\n          children: \"1 Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: monthBtn,\n          children: \"1 Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: yearBtn,\n          children: \"1 Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PlotData, \"zi2cHZ2R18KgzDTHhoExSUX6RI0=\");\n\n_c = PlotData;\nexport default PlotData;\nconst PriceChange = styled.p`\n    color: ${({\n  price\n}) => price > 0 ? \"green\" : \"red\"};\n`;\n_c2 = PriceChange;\nconst Buttons = styled.div`\n    .btn {\n        margin: 0 8px 0 8px;\n        padding: 2px 8px;\n    }\n    \n`;\n_c3 = Buttons;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PlotData\");\n$RefreshReg$(_c2, \"PriceChange\");\n$RefreshReg$(_c3, \"Buttons\");","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/crypto/PlotData.js"],"names":["React","useState","Plot","styled","PlotData","data","timespan","setTimespan","isActiveOne","setIsActiveOne","isActiveTwo","isActiveThree","setIsActiveTwo","setIsActiveThree","day","month","year","detail","timeViewHandler","transformData","plotData","x","y","forEach","each","push","t","dayBtn","monthBtn","yearBtn","current_price","toLocaleString","price_change_percentage_24h","toFixed","type","mode","marker","color","autosize","title","name","width","height","PriceChange","p","price","Buttons","div"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport styled from 'styled-components';\n\nconst PlotData = ({ data }) => {\n    const [timespan, setTimespan] = useState(\"24\")\n    const [isActiveOne, setIsActiveOne] = useState({ isActiveOne: false, isActiveTwo: false, isActiveThree: false })\n    const [isActiveTwo, setIsActiveTwo] = useState({ isActiveOne: false, isActiveTwo: false, isActiveThree: false })\n    const [isActiveThree, setIsActiveThree] = useState({ isActiveOne: false, isActiveTwo: false, isActiveThree: false })\n    const { day, month, year, detail } = data\n\n\n\n    const timeViewHandler = () => {\n        switch (timespan) {\n            case \"24h\":\n                return day;\n            case \"30d\":\n                return month;\n            case \"1y\":\n                return year;\n            default:\n                return day;\n        }\n    }\n\n    const transformData = (data) => {\n        let plotData = []\n        let x = []\n        let y = []\n\n        data?.forEach(each => {\n            x.push(each.t)\n            y.push(each.y)\n        })\n        plotData['x'] = x;\n        plotData['y'] = y;\n\n        return plotData\n    }\n\n    const dayBtn = () => {\n        setTimespan(\"24h\")\n    }\n    const monthBtn = () => {\n        setTimespan(\"30d\")\n    }\n    const yearBtn = () => {\n        setTimespan(\"1y\")\n    }\n\n    return (\n        <div>\n            {detail && (\n                <>\n                    <div>\n                        <p>${detail.current_price.toLocaleString()}</p>\n                        <PriceChange price={detail.price_change_percentage_24h}>{detail.price_change_percentage_24h.toFixed(2)}%</PriceChange>\n                    </div>\n                </>\n            )}\n            {\n                day && (\n                    <>\n                        <Plot data={[\n                            {\n                                type: 'scatter',\n                                mode: 'lines',\n                                x: transformData(timeViewHandler())['x'],\n                                y: transformData(timeViewHandler())['y'],\n                                marker: { color: '#ed022d' },\n                            }\n                        ]}\n                            layout={{ autosize: true, title: `${detail.name}` }}\n                            useResizeHandler={true}\n                            style={{ width: \"100%\", height: \"100%\" }}\n                        />\n                        <Buttons>\n                            <button className=\"btn\" onClick={dayBtn}>1 Day</button>\n                            <button className=\"btn\" onClick={monthBtn}>1 Month</button>\n                            <button className=\"btn\" onClick={yearBtn}>1 Year</button>\n                        </Buttons>\n                    </>\n                )\n            }\n        </div>\n    )\n}\n\nexport default PlotData\n\nconst PriceChange = styled.p`\n    color: ${({ price }) => (price > 0 ? \"green\" : \"red\")};\n`\n\nconst Buttons = styled.div`\n    .btn {\n        margin: 0 8px 0 8px;\n        padding: 2px 8px;\n    }\n    \n`"]},"metadata":{},"sourceType":"module"}