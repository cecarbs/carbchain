{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/users/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { axiosInstance } from '../../api/axios';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  email: yup.string().required(),\n  password: yup.string().min(4).max(15).required(),\n  confirmPassword: yup.string().oneOf([yup.ref(\"password\"), null])\n});\n\nconst Register = () => {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const registerHandler = async d => {\n    try {\n      // const res = await axiosInstance.post('/user/create/', d)\n      const clean = {\n        \"email\": d.email,\n        \"password\": d.password\n      };\n      console.log(clean);\n    } catch (error) {\n      console.log(error.stack);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(registerHandler),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...register(\"email\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          ...register(\"password\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Retype password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          ...register(\"confirmPassword\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.confirmPassword && \"Passwords do not match\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"cSudtlZF25wA1QXS6hk7TRnoNuU=\", false, function () {\n  return [useForm];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/users/RegisterForm.js"],"names":["React","useForm","axiosInstance","yupResolver","yup","schema","object","shape","email","string","required","password","min","max","confirmPassword","oneOf","ref","Register","register","handleSubmit","formState","errors","resolver","registerHandler","d","clean","console","log","error","stack","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AAEA,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC9BC,EAAAA,KAAK,EAAEJ,GAAG,CAACK,MAAJ,GAAaC,QAAb,EADuB;AAE9BC,EAAAA,QAAQ,EAAEP,GAAG,CAACK,MAAJ,GAAaG,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BH,QAA5B,EAFoB;AAG9BI,EAAAA,eAAe,EAAEV,GAAG,CAACK,MAAJ,GAAaM,KAAb,CAAmB,CAACX,GAAG,CAACY,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CAAnB;AAHa,CAAnB,CAAf;;AAMA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAAA;;AAEnB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAArC,MAAoDpB,OAAO,CAAC;AAC9DqB,IAAAA,QAAQ,EAAEnB,WAAW,CAACE,MAAD;AADyC,GAAD,CAAjE;;AAIA,QAAMkB,eAAe,GAAG,MAAOC,CAAP,IAAa;AACjC,QAAI;AACA;AACA,YAAMC,KAAK,GAAG;AACV,iBAASD,CAAC,CAAChB,KADD;AAEV,oBAAYgB,CAAC,CAACb;AAFJ,OAAd;AAIAe,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAPD,CAOE,OAAOG,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,KAAlB;AACH;AACJ,GAXD;;AAYA,sBACI;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEV,YAAY,CAACI,eAAD,CAA5B;AAAA,8BACI;AAAA,yCAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAA,aAAuBL,QAAQ,CAAC,OAAD;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA,mCAAIG,MAAM,CAACb,KAAX,kDAAI,cAAcsB;AAAlB;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,4CAEI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAA,aAA2BZ,QAAQ,CAAC,UAAD;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAUI;AAAA,sCAAIG,MAAM,CAACV,QAAX,qDAAI,iBAAiBmB;AAArB;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAA,mDAEI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAA,aAA2BZ,QAAQ,CAAC,iBAAD;AAAnC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAeI;AAAA,kBAAIG,MAAM,CAACP,eAAP,IAA0B;AAA9B;AAAA;AAAA;AAAA;AAAA,cAfJ,eAgBI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CAxCD;;GAAMG,Q;UAEwDhB,O;;;KAFxDgB,Q;AA0CN,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport { useForm } from 'react-hook-form';\nimport { axiosInstance } from '../../api/axios';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n    email: yup.string().required(),\n    password: yup.string().min(4).max(15).required(),\n    confirmPassword: yup.string().oneOf([yup.ref(\"password\"), null])\n})\n\nconst Register = () => {\n\n    const { register, handleSubmit, formState: { errors } } = useForm({\n        resolver: yupResolver(schema),\n    })\n\n    const registerHandler = async (d) => {\n        try {\n            // const res = await axiosInstance.post('/user/create/', d)\n            const clean = {\n                \"email\": d.email,\n                \"password\": d.password\n            }\n            console.log(clean)\n        } catch (error) {\n            console.log(error.stack)\n        }\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit(registerHandler)}>\n                <label>\n                    Email\n                    <input type=\"text\" {...register(\"email\")} />\n                </label>\n                <p>{errors.email?.message}</p>\n                <label>\n                    Password\n                    <input type=\"password\" {...register(\"password\")} />\n                </label>\n                <p>{errors.password?.message}</p>\n                <label>\n                    Retype password\n                    <input type=\"password\" {...register(\"confirmPassword\")} />\n                </label>\n                <p>{errors.confirmPassword && \"Passwords do not match\"}</p>\n                <input type=\"submit\" value=\"submit\" />\n            </form>\n        </div>\n    )\n}\n\nexport default Register\n"]},"metadata":{},"sourceType":"module"}