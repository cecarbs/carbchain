{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/crypto/PlotData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlotData = ({\n  data\n}) => {\n  _s();\n\n  const [timespan, setTimespan] = useState(\"24\");\n  const [isActiveOne, setIsActiveOne] = useState(true);\n  const [isActiveTwo, setIsActiveTwo] = useState(false);\n  const [isActiveThree, setIsActiveThree] = useState(false);\n  const {\n    day,\n    month,\n    year,\n    detail\n  } = data;\n\n  const timeViewHandler = () => {\n    switch (timespan) {\n      case \"24h\":\n        return day;\n\n      case \"30d\":\n        return month;\n\n      case \"1y\":\n        return year;\n\n      default:\n        return day;\n    }\n  };\n\n  const transformData = data => {\n    let plotData = [];\n    let x = [];\n    let y = [];\n    data === null || data === void 0 ? void 0 : data.forEach(each => {\n      x.push(each.t);\n      y.push(each.y);\n    });\n    plotData['x'] = x;\n    plotData['y'] = y;\n    return plotData;\n  };\n\n  const dayBtn = () => {\n    setTimespan(\"24h\");\n    setIsActiveOne(true);\n    setIsActiveTwo(false);\n    setIsActiveThree(false);\n  };\n\n  const monthBtn = () => {\n    setTimespan(\"30d\");\n    setIsActiveOne(false);\n    setIsActiveTwo(true);\n    setIsActiveThree(false);\n  };\n\n  const yearBtn = () => {\n    setTimespan(\"1y\");\n    setIsActiveOne(false);\n    setIsActiveTwo(false);\n    setIsActiveThree(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [detail && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"$\", detail.current_price.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PriceChange, {\n          price: detail.price_change_percentage_24h,\n          children: [detail.price_change_percentage_24h.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)\n    }, void 0, false), day && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          type: 'scatter',\n          mode: 'lines',\n          x: transformData(timeViewHandler())['x'],\n          y: transformData(timeViewHandler())['y'],\n          marker: {\n            color: '#ed022d'\n          }\n        }],\n        layout: {\n          autosize: true,\n          title: `${detail.name}`\n        },\n        useResizeHandler: true,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n        children: [/*#__PURE__*/_jsxDEV(One, {\n          isActiveOne: isActiveOne,\n          className: \"btn\",\n          onClick: dayBtn,\n          children: \"1 Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Two, {\n          isActiveTwo: isActiveTwo,\n          className: \"btn\",\n          onClick: monthBtn,\n          children: \"1 Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Three, {\n          isActiveThree: isActiveThree,\n          className: \"btn\",\n          onClick: yearBtn,\n          children: \"1 Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PlotData, \"SQrXu3sjNpqlibGUVvvQo778c5o=\");\n\n_c = PlotData;\nexport default PlotData;\nconst PriceChange = styled.p`\n    color: ${({\n  price\n}) => price > 0 ? \"green\" : \"red\"};\n`;\n_c2 = PriceChange;\nconst Buttons = styled.div`\n    .btn {\n        margin: 0 8px 0 8px;\n        padding: 2px 8px;\n        border-radius: 4px;\n        outline: none;\n        border: 1px solid gray;\n        padding: 4px 10px;\n    }\n    \n`;\n_c3 = Buttons;\nconst One = styled.button`\n    background-color: ${({\n  isActiveOne\n}) => isActiveOne ? '#092327' : '#0b5351'};\n    /* color: ${({\n  isActiveOne\n}) => isActiveOne ? 'white' : 'black'} */\n    color: white;\n`;\n_c4 = One;\nconst Two = styled.button`\n    background-color: ${({\n  isActiveTwo\n}) => isActiveTwo ? '#092327' : '#0b5351'};\n    color: white;\n\n`;\n_c5 = Two;\nconst Three = styled.button`\n    background-color: ${({\n  isActiveThree\n}) => isActiveThree ? 'red' : 'green'}\n`;\n_c6 = Three;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"PlotData\");\n$RefreshReg$(_c2, \"PriceChange\");\n$RefreshReg$(_c3, \"Buttons\");\n$RefreshReg$(_c4, \"One\");\n$RefreshReg$(_c5, \"Two\");\n$RefreshReg$(_c6, \"Three\");","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/crypto/PlotData.js"],"names":["React","useState","Plot","styled","PlotData","data","timespan","setTimespan","isActiveOne","setIsActiveOne","isActiveTwo","setIsActiveTwo","isActiveThree","setIsActiveThree","day","month","year","detail","timeViewHandler","transformData","plotData","x","y","forEach","each","push","t","dayBtn","monthBtn","yearBtn","current_price","toLocaleString","price_change_percentage_24h","toFixed","type","mode","marker","color","autosize","title","name","width","height","PriceChange","p","price","Buttons","div","One","button","Two","Three"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport styled from 'styled-components';\n\nconst PlotData = ({ data }) => {\n    const [timespan, setTimespan] = useState(\"24\")\n    const [isActiveOne, setIsActiveOne] = useState(true)\n    const [isActiveTwo, setIsActiveTwo] = useState(false)\n    const [isActiveThree, setIsActiveThree] = useState(false)\n    const { day, month, year, detail } = data\n\n\n\n    const timeViewHandler = () => {\n        switch (timespan) {\n            case \"24h\":\n                return day;\n            case \"30d\":\n                return month;\n            case \"1y\":\n                return year;\n            default:\n                return day;\n        }\n    }\n\n    const transformData = (data) => {\n        let plotData = []\n        let x = []\n        let y = []\n\n        data?.forEach(each => {\n            x.push(each.t)\n            y.push(each.y)\n        })\n        plotData['x'] = x;\n        plotData['y'] = y;\n\n        return plotData\n    }\n\n    const dayBtn = () => {\n        setTimespan(\"24h\")\n        setIsActiveOne(true)\n        setIsActiveTwo(false)\n        setIsActiveThree(false)\n    }\n    const monthBtn = () => {\n        setTimespan(\"30d\")\n        setIsActiveOne(false)\n        setIsActiveTwo(true)\n        setIsActiveThree(false)\n    }\n    const yearBtn = () => {\n        setTimespan(\"1y\")\n        setIsActiveOne(false)\n        setIsActiveTwo(false)\n        setIsActiveThree(true)\n    }\n\n    return (\n        <div>\n            {detail && (\n                <>\n                    <div>\n                        <p>${detail.current_price.toLocaleString()}</p>\n                        <PriceChange price={detail.price_change_percentage_24h}>{detail.price_change_percentage_24h.toFixed(2)}%</PriceChange>\n                    </div>\n                </>\n            )}\n            {\n                day && (\n                    <>\n                        <Plot data={[\n                            {\n                                type: 'scatter',\n                                mode: 'lines',\n                                x: transformData(timeViewHandler())['x'],\n                                y: transformData(timeViewHandler())['y'],\n                                marker: { color: '#ed022d' },\n                            }\n                        ]}\n                            layout={{ autosize: true, title: `${detail.name}` }}\n                            useResizeHandler={true}\n                            style={{ width: \"100%\", height: \"100%\" }}\n                        />\n                        <Buttons>\n                            <One isActiveOne={isActiveOne} className=\"btn\" onClick={dayBtn}>1 Day</One>\n                            <Two isActiveTwo={isActiveTwo} className=\"btn\" onClick={monthBtn}>1 Month</Two>\n                            <Three isActiveThree={isActiveThree} className=\"btn\" onClick={yearBtn}>1 Year</Three>\n                        </Buttons>\n                    </>\n                )\n            }\n        </div>\n    )\n}\n\nexport default PlotData\n\nconst PriceChange = styled.p`\n    color: ${({ price }) => (price > 0 ? \"green\" : \"red\")};\n`\n\nconst Buttons = styled.div`\n    .btn {\n        margin: 0 8px 0 8px;\n        padding: 2px 8px;\n        border-radius: 4px;\n        outline: none;\n        border: 1px solid gray;\n        padding: 4px 10px;\n    }\n    \n`\n\nconst One = styled.button`\n    background-color: ${({ isActiveOne }) => isActiveOne ? '#092327' : '#0b5351'};\n    /* color: ${({ isActiveOne }) => isActiveOne ? 'white' : 'black'} */\n    color: white;\n`\n\nconst Two = styled.button`\n    background-color: ${({ isActiveTwo }) => isActiveTwo ? '#092327' : '#0b5351'};\n    color: white;\n\n`\nconst Three = styled.button`\n    background-color: ${({ isActiveThree }) => isActiveThree ? 'red' : 'green'}\n`"]},"metadata":{},"sourceType":"module"}