{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/Portfolio.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport CoinRow from './portfolio/CoinRow';\nimport { axiosInstance } from '../api/axios';\nimport { MyContext } from '../contextAPI/UserContext';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Portfolio = () => {\n  _s();\n\n  const [holdings, setHoldings] = useState([]);\n  const {\n    user,\n    coins\n  } = useContext(MyContext);\n  const {\n    total,\n    setTotal\n  } = useState(null);\n  const [res, setRes] = useState(null);\n  const [mergedArr, setMergedArr] = useState(null); // const myArrayFilter = coins.filter(coin => {\n  //     return holdings.some(holding => {\n  //         return holding.name === coin.name\n  //     })\n  // })\n\n  const createTotal = arr => {\n    // let total = 0\n    // arr.map((el) => (total += el.quantity * el.current_price))\n    // return total\n    arr.forEach(el => console.log(typeof el.quantity));\n  };\n\n  console.log(coins);\n  useEffect(() => {\n    async function getData() {\n      try {\n        let {\n          data\n        } = await axiosInstance.get(`/portfolio/`, {\n          params: {\n            id: 1\n          }\n        });\n        setHoldings(data);\n        let str = \"\";\n        data.map((e, i) => {\n          if (i !== data.length - 1) {\n            str += e.name.toLowerCase() + \"%2C%20\";\n          } else {\n            str += e.name.toLowerCase();\n          }\n        });\n        let res = await axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${str}`);\n        setRes(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    getData();\n  }, []); // const myArrayFilter = coins.filter(coin => {\n  //     return holdings.some(holding => {\n  //         return holding.name === coin.name\n  //     })\n  // })\n\n  const click = () => {\n    console.log(res);\n    console.log(holdings);\n    const a3 = res.map(t1 => ({ ...t1,\n      ...holdings.find(t2 => t2.name === t1.name)\n    }));\n    setMergedArr(a3);\n  };\n\n  const click2 = () => {\n    console.log(mergedArr);\n    let total = mergedArr.reduce((a, b) => a + b.quantity * parseFloat(b.current_price), 0);\n    let total1 = createTotal(mergedArr);\n    console.log(total);\n    console.log(total1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: click,\n      children: \"Click m1e1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: click2,\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: total\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Portfolio COmponent \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), holdings === null || holdings === void 0 ? void 0 : holdings.map((holding, i) => /*#__PURE__*/_jsxDEV(CoinRow, {\n      name: holding.name,\n      symbol: holding.symbol,\n      quantity: holding.quantity,\n      image: holding.image_url\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Portfolio, \"HOApy8nLLAZeF/0llm0nUkTvl+A=\");\n\n_c = Portfolio;\nexport default Portfolio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Portfolio\");","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/Portfolio.js"],"names":["React","useEffect","useState","useContext","CoinRow","axiosInstance","MyContext","axios","Portfolio","holdings","setHoldings","user","coins","total","setTotal","res","setRes","mergedArr","setMergedArr","createTotal","arr","forEach","el","console","log","quantity","getData","data","get","params","id","str","map","e","i","length","name","toLowerCase","error","click","a3","t1","find","t2","click2","reduce","a","b","parseFloat","current_price","total1","holding","symbol","image_url"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport CoinRow from './portfolio/CoinRow';\nimport { axiosInstance } from '../api/axios';\nimport { MyContext } from '../contextAPI/UserContext';\nimport axios from 'axios';\nconst Portfolio = () => {\n    const [holdings, setHoldings] = useState([])\n    const { user, coins } = useContext(MyContext)\n    const { total, setTotal } = useState(null)\n    const [res, setRes] = useState(null)\n    const [mergedArr, setMergedArr] = useState(null)\n    // const myArrayFilter = coins.filter(coin => {\n    //     return holdings.some(holding => {\n    //         return holding.name === coin.name\n    //     })\n    // })\n\n    const createTotal = (arr) => {\n        // let total = 0\n        // arr.map((el) => (total += el.quantity * el.current_price))\n        // return total\n        arr.forEach((el) => (console.log(typeof el.quantity)))\n    }\n\n    console.log(coins)\n    useEffect(() => {\n        async function getData() {\n            try {\n                let { data } = await axiosInstance.get(`/portfolio/`, {\n                    params: {\n                        id: 1\n                    }\n                })\n                setHoldings(data)\n                let str = \"\"\n                data.map((e, i) => {\n                    if (i !== data.length - 1) {\n                        str += e.name.toLowerCase() + \"%2C%20\"\n                    } else {\n                        str += e.name.toLowerCase()\n                    }\n                })\n\n                let res = await axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${str}`)\n\n                setRes(res.data)\n            } catch (error) {\n                console.log(error)\n            }\n        }\n        getData()\n    }, [])\n\n    // const myArrayFilter = coins.filter(coin => {\n    //     return holdings.some(holding => {\n    //         return holding.name === coin.name\n    //     })\n    // })\n\n    const click = () => {\n        console.log(res)\n        console.log(holdings)\n        const a3 = res.map(t1 => ({ ...t1, ...holdings.find(t2 => t2.name === t1.name) }))\n        setMergedArr(a3)\n    }\n\n    const click2 = () => {\n        console.log(mergedArr)\n        let total = mergedArr.reduce((a, b) => a + (b.quantity * parseFloat(b.current_price)), 0)\n        let total1 = createTotal(mergedArr)\n        console.log(total)\n        console.log(total1)\n    }\n\n\n\n    return (\n\n        <div>\n            <button onClick={click}>Click m1e1</button>\n            <button onClick={click2}>Click me</button>\n            {/* <pre>{JSON.stringify(holdings, null, 2)}</pre> */}\n            <h1>{total}</h1>\n            <h1>Portfolio COmponent </h1>\n            {holdings?.map((holding, i) => (\n                <CoinRow\n                    key={i}\n                    name={holding.name}\n                    symbol={holding.symbol}\n                    quantity={holding.quantity}\n                    image={holding.image_url}\n                />\n            ))}\n\n        </div >\n    )\n}\n\nexport default Portfolio\n"]},"metadata":{},"sourceType":"module"}