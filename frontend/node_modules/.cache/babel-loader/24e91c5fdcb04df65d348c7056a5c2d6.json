{"ast":null,"code":"import axios from 'axios';\nexport const coinGecko = axios.create({\n  baseURL: \"https://api.coingecko.com/api/v3\"\n});\nexport const testing = axios.create({\n  baseURL: \"https://api.coingecko.com/api/v3\",\n  params: {\n    vs_currency: \"usd\",\n    days: \"1\"\n  }\n});\nexport const axiosInstance = axios.create({\n  baseURL: \"http://localhost:8000/api/\",\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => response, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response === 'undefined') {\n    console.error('A server/network error occurred. Looks like CORS might be the problem.');\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n    const refresh_token = localStorage.getItem('refresh_token');\n    return axiosInstance.post('/token/refresh/', {\n      refresh: refresh_token\n    }).then(response => {\n      localStorage.setItem('access_token', response.data.access);\n      localStorage.setItem('refresh_token', response.data.refresh);\n      axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n      originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n      return axiosInstance(originalRequest);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/carbcoin/frontend/src/api/axios.js"],"names":["axios","coinGecko","create","baseURL","testing","params","vs_currency","days","axiosInstance","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","console","Promise","reject","status","url","window","location","href","statusText","refresh_token","post","refresh","then","setItem","data","access","defaults","catch","err","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa;AAClCC,EAAAA,OAAO,EAAE;AADyB,CAAb,CAAlB;AAIP,OAAO,MAAMC,OAAO,GAAGJ,KAAK,CAACE,MAAN,CAAa;AAChCC,EAAAA,OAAO,EAAE,kCADuB;AAEhCE,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAE,KADT;AAEJC,IAAAA,IAAI,EAAE;AAFF;AAFwB,CAAb,CAAhB;AAQP,OAAO,MAAMC,aAAa,GAAGR,KAAK,CAACE,MAAN,CAAa;AACtCC,EAAAA,OAAO,EAAE,4BAD6B;AAEtCM,EAAAA,OAAO,EAAE,IAF6B;AAGtCC,EAAAA,OAAO,EAAE;AACLC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB,IACT,SAASD,YAAY,CAACC,OAAb,CAAqB,cAArB,CADA,GAET,IAHD;AAIL,oBAAgB,kBAJX;AAKLC,IAAAA,MAAM,EAAE;AALH;AAH6B,CAAb,CAAtB;AAYPN,aAAa,CAACO,YAAd,CAA2BC,QAA3B,CAAoCC,GAApC,CACID,QAAQ,IAAIA,QADhB,EAEI,gBAAgBE,KAAhB,EAAuB;AACnB,QAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;;AAEA,MAAI,OAAOF,KAAK,CAACF,QAAb,KAA0B,WAA9B,EAA2C;AACvCK,IAAAA,OAAO,CAACH,KAAR,CACI,wEADJ;AAGA,WAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH;;AAED,MAAIA,KAAK,CAACF,QAAN,CAAeQ,MAAf,KAA0B,GAA1B,IAAiCL,eAAe,CAACM,GAAhB,KAAwBtB,OAAO,GAAG,gBAAvE,EAAyF;AACrFuB,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACA,WAAON,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH;;AAED,MAAIA,KAAK,CAACF,QAAN,CAAeQ,MAAf,KAA0B,GAA1B,IAAiCN,KAAK,CAACF,QAAN,CAAea,UAAf,KAA8B,cAAnE,EAAmF;AAC/E,UAAMC,aAAa,GAAGlB,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAtB;AAEA,WAAOL,aAAa,CACfuB,IADE,CACG,iBADH,EACsB;AAAEC,MAAAA,OAAO,EAAEF;AAAX,KADtB,EAEFG,IAFE,CAEIjB,QAAD,IAAc;AAEhBJ,MAAAA,YAAY,CAACsB,OAAb,CAAqB,cAArB,EAAqClB,QAAQ,CAACmB,IAAT,CAAcC,MAAnD;AACAxB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,eAArB,EAAsClB,QAAQ,CAACmB,IAAT,CAAcH,OAApD;AAEAxB,MAAAA,aAAa,CAAC6B,QAAd,CAAuB3B,OAAvB,CAA+B,eAA/B,IAAkD,SAASM,QAAQ,CAACmB,IAAT,CAAcC,MAAzE;AACAjB,MAAAA,eAAe,CAACT,OAAhB,CAAwB,eAAxB,IAA2C,SAASM,QAAQ,CAACmB,IAAT,CAAcC,MAAlE;AAEA,aAAO5B,aAAa,CAACW,eAAD,CAApB;AACH,KAXE,EAYFmB,KAZE,CAYIC,GAAG,IAAI;AACVlB,MAAAA,OAAO,CAACmB,GAAR,CAAYD,GAAZ;AACH,KAdE,CAAP;AAeH;;AACD,SAAOjB,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH,CArCL","sourcesContent":["import axios from 'axios';\n\nexport const coinGecko = axios.create({\n    baseURL: \"https://api.coingecko.com/api/v3\"\n})\n\nexport const testing = axios.create({\n    baseURL: \"https://api.coingecko.com/api/v3\",\n    params: {\n        vs_currency: \"usd\",\n        days: \"1\"\n    }\n})\n\nexport const axiosInstance = axios.create({\n    baseURL: \"http://localhost:8000/api/\",\n    timeout: 5000,\n    headers: {\n        Authorization: localStorage.getItem('access_token')\n            ? 'JWT ' + localStorage.getItem('access_token')\n            : null,\n        'Content-Type': 'application/json',\n        accept: 'application/json'\n    }\n})\n\naxiosInstance.interceptors.response.use(\n    response => response,\n    async function (error) {\n        const originalRequest = error.config;\n\n        if (typeof error.response === 'undefined') {\n            console.error(\n                'A server/network error occurred. Looks like CORS might be the problem.'\n            )\n            return Promise.reject(error)\n        }\n\n        if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n            window.location.href = '/login/';\n            return Promise.reject(error)\n        }\n\n        if (error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n            const refresh_token = localStorage.getItem('refresh_token');\n\n            return axiosInstance\n                .post('/token/refresh/', { refresh: refresh_token })\n                .then((response) => {\n\n                    localStorage.setItem('access_token', response.data.access);\n                    localStorage.setItem('refresh_token', response.data.refresh);\n\n                    axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n                    originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n\n                    return axiosInstance(originalRequest);\n                })\n                .catch(err => {\n                    console.log(err)\n                });\n        }\n        return Promise.reject(error)\n    }\n)"]},"metadata":{},"sourceType":"module"}