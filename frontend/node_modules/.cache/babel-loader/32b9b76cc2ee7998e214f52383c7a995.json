{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/users/RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { axiosInstance } from '../../api/axios';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  email: yup.string().required(),\n  password: yup.string().min(4).max(15).required(),\n  confirmPassword: yup.string().oneOf([yup.ref(\"password\"), null])\n});\n\nconst Register = () => {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const registerHandler = async d => {\n    try {\n      // const res = await axiosInstance.post('/user/create/', d)\n      console.log(data);\n    } catch (error) {\n      console.log(error.stack);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(registerHandler),\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          ref: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          ref: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Retype password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"confirmPassword\",\n          ref: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errors.confirmPassword && \"Passwords do not match\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"iyH731LTjAbxnbpM16EGorBPneQ=\", false, function () {\n  return [useForm];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/carbcoin/frontend/src/components/users/RegisterForm.js"],"names":["React","useForm","axiosInstance","yupResolver","yup","schema","object","shape","email","string","required","password","min","max","confirmPassword","oneOf","ref","Register","register","handleSubmit","errors","resolver","registerHandler","d","console","log","data","error","stack","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;AAEA,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAC9BC,EAAAA,KAAK,EAAEJ,GAAG,CAACK,MAAJ,GAAaC,QAAb,EADuB;AAE9BC,EAAAA,QAAQ,EAAEP,GAAG,CAACK,MAAJ,GAAaG,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,EAAxB,EAA4BH,QAA5B,EAFoB;AAG9BI,EAAAA,eAAe,EAAEV,GAAG,CAACK,MAAJ,GAAaM,KAAb,CAAmB,CAACX,GAAG,CAACY,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CAAnB;AAHa,CAAnB,CAAf;;AAMA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAAA;;AACnB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAqCnB,OAAO,CAAC;AAC/CoB,IAAAA,QAAQ,EAAElB,WAAW,CAACE,MAAD;AAD0B,GAAD,CAAlD;;AAIA,QAAMiB,eAAe,GAAG,MAAOC,CAAP,IAAa;AACjC,QAAI;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACH,KAHD,CAGE,OAAOC,KAAP,EAAc;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,KAAlB;AACH;AACJ,GAPD;;AAQA,sBACI;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAET,YAAY,CAACG,eAAD,CAA5B;AAAA,8BACI;AAAA,yCAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,GAAG,EAAEJ;AAArC;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA,mCAAIE,MAAM,CAACZ,KAAX,kDAAI,cAAcqB;AAAlB;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,4CAEI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,IAAI,EAAC,UAA5B;AAAuC,UAAA,GAAG,EAAEX;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAUI;AAAA,sCAAIE,MAAM,CAACT,QAAX,qDAAI,iBAAiBkB;AAArB;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAA,mDAEI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,IAAI,EAAC,iBAA5B;AAA8C,UAAA,GAAG,EAAEX;AAAnD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAeI;AAAA,kBAAIE,MAAM,CAACN,eAAP,IAA0B;AAA9B;AAAA;AAAA;AAAA;AAAA,cAfJ,eAgBI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CAnCD;;GAAMG,Q;UACyChB,O;;;KADzCgB,Q;AAqCN,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport { useForm } from 'react-hook-form';\nimport { axiosInstance } from '../../api/axios';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n    email: yup.string().required(),\n    password: yup.string().min(4).max(15).required(),\n    confirmPassword: yup.string().oneOf([yup.ref(\"password\"), null])\n})\n\nconst Register = () => {\n    const { register, handleSubmit, errors } = useForm({\n        resolver: yupResolver(schema),\n    })\n\n    const registerHandler = async (d) => {\n        try {\n            // const res = await axiosInstance.post('/user/create/', d)\n            console.log(data)\n        } catch (error) {\n            console.log(error.stack)\n        }\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit(registerHandler)}>\n                <label>\n                    Email\n                    <input type=\"text\" name=\"email\" ref={register} />\n                </label>\n                <p>{errors.email?.message}</p>\n                <label>\n                    Password\n                    <input type=\"password\" name=\"password\" ref={register} />\n                </label>\n                <p>{errors.password?.message}</p>\n                <label>\n                    Retype password\n                    <input type=\"password\" name=\"confirmPassword\" ref={register} />\n                </label>\n                <p>{errors.confirmPassword && \"Passwords do not match\"}</p>\n                <input type=\"submit\" value=\"submit\" />\n            </form>\n        </div>\n    )\n}\n\nexport default Register\n"]},"metadata":{},"sourceType":"module"}