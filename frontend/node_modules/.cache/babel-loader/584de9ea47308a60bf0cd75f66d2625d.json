{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/Projects/frontend/src/components/PlotData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlotData = ({\n  data\n}) => {\n  _s();\n\n  const [timespan, setTimespan] = useState(\"24\");\n  const {\n    day,\n    month,\n    year,\n    detail\n  } = data; // console.log(detail)\n\n  const timeViewHandler = () => {\n    switch (timespan) {\n      case \"24h\":\n        return day;\n\n      case \"30d\":\n        return month;\n\n      case \"1y\":\n        return year;\n\n      default:\n        return day;\n    }\n  };\n\n  const transformData = data => {\n    let plotData = [];\n    let x = [];\n    let y = [];\n    data === null || data === void 0 ? void 0 : data.forEach(each => {\n      // let test = new Date(each.t).toLocaleTimeString(\"en-US\")\n      // x.push(test)\n      x.push(each.t);\n      y.push(each.y);\n    });\n    plotData['x'] = x;\n    plotData['y'] = y;\n    return plotData;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [detail && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: detail.current_price.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PriceChange, {\n          price: detail.price_change_percentage_24h,\n          children: [detail.price_change_percentage_24h.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false), day && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          type: 'scatter',\n          mode: 'lines',\n          x: transformData(timeViewHandler())['x'],\n          y: transformData(timeViewHandler())['y'],\n          marker: {\n            color: '#ed022d'\n          }\n        }],\n        layout: {\n          width: 1000,\n          height: 500,\n          title: `${detail.name}`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimespan(\"24h\"),\n          children: \"1 Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimespan(\"30d\"),\n          children: \"1 Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTimespan(\"1y\"),\n          children: \"1 Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PlotData, \"+vzOPk1QVwQyRsNp1YO1BxRv95Q=\");\n\n_c = PlotData;\nexport default PlotData;\nconst PriceChange = styled.p`\n    color: ${({\n  price\n}) => price > 0 ? \"green\" : \"red\"};\n`;\n_c2 = PriceChange;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PlotData\");\n$RefreshReg$(_c2, \"PriceChange\");","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/frontend/src/components/PlotData.js"],"names":["React","useState","Plot","styled","PlotData","data","timespan","setTimespan","day","month","year","detail","timeViewHandler","transformData","plotData","x","y","forEach","each","push","t","current_price","toFixed","price_change_percentage_24h","type","mode","marker","color","width","height","title","name","PriceChange","p","price"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport Plot from 'react-plotly.js';\nimport styled from 'styled-components';\n\nconst PlotData = ({data}) => {\n    const [timespan, setTimespan] = useState(\"24\")\n    const {day, month, year, detail} = data\n    // console.log(detail)\n    const timeViewHandler = () => {\n        switch (timespan) {\n            case \"24h\":\n                return day;\n            case \"30d\":\n                return month;\n            case \"1y\":\n                return year;\n            default:\n                return day;\n        }\n    }\n\n    const transformData = (data) => {\n        let plotData = []\n        let x = []\n        let y = []\n\n        data?.forEach(each => {\n            // let test = new Date(each.t).toLocaleTimeString(\"en-US\")\n            // x.push(test)\n            x.push(each.t)\n            y.push(each.y)\n        })\n        plotData['x'] = x;\n        plotData['y'] = y;\n\n        return plotData\n    }\n    \n    return (\n        <div>\n             {detail && (\n                <>\n                    <div>\n                        <p>{detail.current_price.toFixed(2)}</p>\n                        <PriceChange price={detail.price_change_percentage_24h}>{detail.price_change_percentage_24h.toFixed(2)}%</PriceChange>\n                    </div>\n                </>\n            )}\n            {\n                day && (\n                    <>\n                        <Plot data={[\n                        {\n                            type: 'scatter',\n                            mode: 'lines',\n                            x: transformData(timeViewHandler())['x'],\n                            y: transformData(timeViewHandler())['y'],\n                            marker: { color: '#ed022d'},\n                        }\n                    ]}\n                        layout = {{width: 1000, height: 500, title: `${detail.name}`}}\n                    />\n            <div>\n                <button onClick={() => setTimespan(\"24h\")}>1 Day</button>\n                <button onClick={() => setTimespan(\"30d\")}>1 Month</button>\n                <button onClick={() => setTimespan(\"1y\")}>1 Year</button>\n            </div>\n                    </>\n                )\n            }\n            \n        </div>\n    )\n}\n\nexport default PlotData\n\nconst PriceChange = styled.p`\n    color: ${({price}) => (price > 0 ? \"green\" : \"red\")};\n`"]},"metadata":{},"sourceType":"module"}