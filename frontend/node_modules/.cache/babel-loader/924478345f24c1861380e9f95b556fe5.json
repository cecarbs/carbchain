{"ast":null,"code":"var _jsxFileName = \"/Users/charles/Desktop/Projects/carbcoin/frontend/src/pages/TransactionPool.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { axiosInstance } from '../api/axios';\nimport Transaction from '../components/blockchain/Transactions';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { MyContext } from '../contextAPI/UserContext';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TransactionPool = () => {\n  _s();\n\n  const [transactionPool, setTransactionPool] = useState([]);\n  let history = useHistory();\n  const {\n    user\n  } = useContext(MyContext);\n  const location = useLocation();\n\n  async function getData() {\n    try {\n      let {\n        data\n      } = await axiosInstance.get('transactions/');\n      setTransactionPool(data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    getData();\n    const id = setInterval(getData, 10000);\n    return () => clearInterval(id);\n  }, []);\n\n  const mineHandler = async () => {\n    let response = await axiosInstance.get('blockchain/mine/');\n\n    if (response.status === 200) {\n      history.push('/blockchain');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TransactionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transaction Pool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transactions\",\n      children: transactionPool === null || transactionPool === void 0 ? void 0 : transactionPool.map(transaction => /*#__PURE__*/_jsxDEV(Transaction, {\n        transaction_data: transaction.transaction_data,\n        metadata: transaction.metadata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), user && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mineHandler,\n      children: \"Mine Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TransactionPool, \"Yoz0v5nRCE+Q52/x1RPZjyUsxJE=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = TransactionPool;\nexport default TransactionPool;\nconst TransactionContainer = styled.div`\n    padding: 0.5rem calc((100vw - 1200px) / 2);\n    \n    h1 {\n        color: white;\n        font-weight: 700;\n        font-size: 2rem;\n        margin-top: 3rem;\n        margin-bottom: 3rem;\n    }\n    \n    .transactions {\n        border-top: 1px solid gray;\n    }\n\n    button {\n        margin-top: 3rem;\n        background-color: #0b3531;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        padding: 10px 20px;\n        cursor: pointer;\n\n        &:hover {\n            transition: 0.3s ease;\n            background-color: #00a9a5; \n            color: black;\n        }\n\n    }\n`;\n_c2 = TransactionContainer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TransactionPool\");\n$RefreshReg$(_c2, \"TransactionContainer\");","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/carbcoin/frontend/src/pages/TransactionPool.js"],"names":["React","useState","useEffect","useContext","axiosInstance","Transaction","useHistory","styled","MyContext","useLocation","TransactionPool","transactionPool","setTransactionPool","history","user","location","getData","data","get","error","console","log","id","setInterval","clearInterval","mineHandler","response","status","push","map","transaction","transaction_data","metadata","TransactionContainer","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;AACA,MAAIY,OAAO,GAAGP,UAAU,EAAxB;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAWX,UAAU,CAACK,SAAD,CAA3B;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,iBAAeO,OAAf,GAAyB;AACrB,QAAI;AACA,UAAI;AAAEC,QAAAA;AAAF,UAAW,MAAMb,aAAa,CAACc,GAAd,CAAkB,eAAlB,CAArB;AACAN,MAAAA,kBAAkB,CAACK,IAAD,CAAlB;AACH,KAHD,CAGE,OAAOE,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AACDjB,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO;AAEP,UAAMM,EAAE,GAAGC,WAAW,CAACP,OAAD,EAAU,KAAV,CAAtB;AAEA,WAAO,MAAMQ,aAAa,CAACF,EAAD,CAA1B;AACH,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMG,WAAW,GAAG,YAAY;AAC5B,QAAIC,QAAQ,GAAG,MAAMtB,aAAa,CAACc,GAAd,CAAkB,kBAAlB,CAArB;;AACA,QAAIQ,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzBd,MAAAA,OAAO,CAACe,IAAR,CAAa,aAAb;AACH;AACJ,GALD;;AAOA,sBACI,QAAC,oBAAD;AAAA,4BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKjB,eADL,aACKA,eADL,uBACKA,eAAe,CAAEkB,GAAjB,CAAsBC,WAAD,iBAClB,QAAC,WAAD;AAAa,QAAA,gBAAgB,EAAEA,WAAW,CAACC,gBAA3C;AAA6D,QAAA,QAAQ,EAAED,WAAW,CAACE;AAAnF;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAHJ,EASKlB,IAAI,iBAAI;AAAQ,MAAA,OAAO,EAAEW,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATb;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CA1CD;;GAAMf,e;UAEYJ,U,EAEGG,W;;;KAJfC,e;AA4CN,eAAeA,eAAf;AAEA,MAAMuB,oBAAoB,GAAG1B,MAAM,CAAC2B,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/BA;MAAMD,oB","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport { axiosInstance } from '../api/axios'\nimport Transaction from '../components/blockchain/Transactions'\nimport { useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { MyContext } from '../contextAPI/UserContext'\nimport { useLocation } from 'react-router-dom'\n\nconst TransactionPool = () => {\n    const [transactionPool, setTransactionPool] = useState([])\n    let history = useHistory()\n    const { user } = useContext(MyContext)\n    const location = useLocation()\n\n    async function getData() {\n        try {\n            let { data } = await axiosInstance.get('transactions/')\n            setTransactionPool(data)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    useEffect(() => {\n        getData()\n\n        const id = setInterval(getData, 10000)\n\n        return () => clearInterval(id)\n    }, [])\n\n    const mineHandler = async () => {\n        let response = await axiosInstance.get('blockchain/mine/')\n        if (response.status === 200) {\n            history.push('/blockchain')\n        }\n    }\n\n    return (\n        <TransactionContainer>\n            {/* <pre>{JSON.stringify(transactionPool, null, 2)}</pre> */}\n            <h1>Transaction Pool</h1>\n            <div className=\"transactions\">\n                {transactionPool?.map((transaction) => (\n                    <Transaction transaction_data={transaction.transaction_data} metadata={transaction.metadata} />\n                ))}\n            </div>\n\n            {user && <button onClick={mineHandler}>Mine Transactions</button>}\n        </TransactionContainer>\n    )\n}\n\nexport default TransactionPool\n\nconst TransactionContainer = styled.div`\n    padding: 0.5rem calc((100vw - 1200px) / 2);\n    \n    h1 {\n        color: white;\n        font-weight: 700;\n        font-size: 2rem;\n        margin-top: 3rem;\n        margin-bottom: 3rem;\n    }\n    \n    .transactions {\n        border-top: 1px solid gray;\n    }\n\n    button {\n        margin-top: 3rem;\n        background-color: #0b3531;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        padding: 10px 20px;\n        cursor: pointer;\n\n        &:hover {\n            transition: 0.3s ease;\n            background-color: #00a9a5; \n            color: black;\n        }\n\n    }\n`\n"]},"metadata":{},"sourceType":"module"}