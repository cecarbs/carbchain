{"ast":null,"code":"import axios from 'axios';\nexport const coinGecko = axios.create({\n  baseURL: \"https://api.coingecko.com/api/v3\"\n});\nexport const testing = axios.create({\n  baseURL: \"https://api.coingecko.com/api/v3\",\n  params: {\n    vs_currency: \"usd\",\n    days: \"1\"\n  }\n});\nexport const baseURL = \"http://localhost:8000/api/\";\nexport const axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem('access_token') ? 'JWT ' + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    accept: 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response === 'undefined') {\n    alert('A server/network error occurred. ' + 'Looks like CORS might be the problem. ' + 'Sorry about this - we will get it fixed shortly.');\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === 'token_not_valid' && error.response.status === 401 && error.response.statusText === 'Unauthorized') {\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken) {\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('/token/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh);\n          axiosInstance.defaults.headers['Authorization'] = 'JWT ' + response.data.access;\n          originalRequest.headers['Authorization'] = 'JWT ' + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log('Refresh token is expired', tokenParts.exp, now);\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log('Refresh token not available.');\n      window.location.href = '/login/';\n    }\n  }\n\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["/Users/charles/Desktop/Projects/carbcoin/frontend/src/api/axios.js"],"names":["axios","coinGecko","create","baseURL","testing","params","vs_currency","days","axiosInstance","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","error","originalRequest","config","alert","Promise","reject","status","url","window","location","href","data","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","console","log","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport const coinGecko = axios.create({\n    baseURL: \"https://api.coingecko.com/api/v3\"\n})\n\nexport const testing = axios.create({\n    baseURL: \"https://api.coingecko.com/api/v3\",\n    params: {\n        vs_currency: \"usd\",\n        days: \"1\"\n    }\n})\n\n\nexport const baseURL = \"http://localhost:8000/api/\"\n\nexport const axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 5000,\n    headers: {\n        Authorization: localStorage.getItem('access_token')\n            ? 'JWT ' + localStorage.getItem('access_token')\n            : null,\n        'Content-Type': 'application/json',\n        accept: 'application/json'\n    }\n})\n\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    async function (error) {\n        const originalRequest = error.config;\n\n        if (typeof error.response === 'undefined') {\n            alert(\n                'A server/network error occurred. ' +\n                'Looks like CORS might be the problem. ' +\n                'Sorry about this - we will get it fixed shortly.'\n            );\n            return Promise.reject(error);\n        }\n\n        if (\n            error.response.status === 401 &&\n            originalRequest.url === baseURL + 'token/refresh/'\n        ) {\n            window.location.href = '/login/';\n            return Promise.reject(error);\n        }\n\n        if (\n            error.response.data.code === 'token_not_valid' &&\n            error.response.status === 401 &&\n            error.response.statusText === 'Unauthorized'\n        ) {\n            const refreshToken = localStorage.getItem('refresh_token');\n\n            if (refreshToken) {\n                const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n                const now = Math.ceil(Date.now() / 1000);\n                console.log(tokenParts.exp);\n\n                if (tokenParts.exp > now) {\n                    return axiosInstance\n                        .post('/token/refresh/', { refresh: refreshToken })\n                        .then((response) => {\n                            localStorage.setItem('access_token', response.data.access);\n                            localStorage.setItem('refresh_token', response.data.refresh);\n\n                            axiosInstance.defaults.headers['Authorization'] =\n                                'JWT ' + response.data.access;\n                            originalRequest.headers['Authorization'] =\n                                'JWT ' + response.data.access;\n\n                            return axiosInstance(originalRequest);\n                        })\n                        .catch((err) => {\n                            console.log(err);\n                        });\n                } else {\n                    console.log('Refresh token is expired', tokenParts.exp, now);\n                    window.location.href = '/login/';\n                }\n            } else {\n                console.log('Refresh token not available.');\n                window.location.href = '/login/';\n            }\n        }\n\n        return Promise.reject(error);\n    }\n);"]},"metadata":{},"sourceType":"module"}